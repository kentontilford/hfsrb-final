import {
  pgTable,
  text,
  boolean,
  jsonb,
  timestamp,
  integer,
  numeric,
  date,
  primaryKey,
  index,
} from "drizzle-orm/pg-core";

export const facility = pgTable("facility", {
  id: text("id").primaryKey(),
  type: text("type").notNull(), // 'Hospital' | 'ASTC' | 'ESRD' | 'LTC'
  name: text("name").notNull(),
  county: text("county"),
  hsa: text("hsa"),
  hpa: text("hpa"),
  address: jsonb("address"),
  lat: numeric("lat"),
  lng: numeric("lng"),
  active: boolean("active").default(true),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  byType: index("facility_by_type").on(t.type),
  byHsa: index("facility_by_hsa").on(t.hsa),
  byHpa: index("facility_by_hpa").on(t.hpa),
  byName: index("facility_by_name").on(t.name),
}));

export const surveyEsrd2023 = pgTable("survey_esrd_2023", {
  facilityId: text("facility_id").references(() => facility.id, { onDelete: "cascade" }).notNull(),
  year: integer("year").notNull().default(2023),
  stations: integer("stations"),
  shifts: integer("shifts"),
  patientsTotal: integer("patients_total"),
  incenterTreatments: integer("incenter_treatments"),
  fteTotal: numeric("fte_total"),
  payerMedicare: numeric("payer_medicare"),
  payerMedicaid: numeric("payer_medicaid"),
  payerPrivate: numeric("payer_private"),
  revenueTotal: numeric("revenue_total"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceAsian: numeric("race_asian"),
  raceHispanic: numeric("race_hispanic"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
}, (t) => ({ pk: primaryKey({ columns: [t.facilityId, t.year] }) }));

// 2024 Hospital Profiles (facility-level subset matching plan)
export const hospitalProfile2024 = pgTable("hospital_profile_2024", {
  facilityId: text("facility_id").references(() => facility.id, { onDelete: "cascade" }).primaryKey(),
  year: integer("year").notNull().default(2024),
  hospitalType: text("hospital_type"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  byType: index("hp2024_by_type").on(t.hospitalType),
}));

// Unified tables by year (forward-looking)
export const hospitalProfileByYear = pgTable("hospital_profile_by_year", {
  facilityId: text("facility_id").references(() => facility.id, { onDelete: "cascade" }).notNull(),
  year: integer("year").notNull(),
  hospitalType: text("hospital_type"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  pk: primaryKey({ columns: [t.facilityId, t.year] }),
  byYear: index("hp_by_year").on(t.year),
  byType: index("hp_by_type").on(t.hospitalType),
}));

// Pre-computed summaries
export const hsaSummary2024 = pgTable("hsa_summary_2024", {
  hsa: text("hsa").primaryKey(),
  totalHospitals: integer("total_hospitals"),
  criticalAccess: integer("critical_access"),
  acuteLtc: integer("acute_ltc"),
  general: integer("general"),
  psychiatric: integer("psychiatric"),
  rehabilitation: integer("rehabilitation"),
  childrens: integer("childrens"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
});

export const hpaSummary2024 = pgTable("hpa_summary_2024", {
  hpa: text("hpa").primaryKey(),
  totalHospitals: integer("total_hospitals"),
  criticalAccess: integer("critical_access"),
  acuteLtc: integer("acute_ltc"),
  general: integer("general"),
  psychiatric: integer("psychiatric"),
  rehabilitation: integer("rehabilitation"),
  childrens: integer("childrens"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
});

export const hsaSummaryByYear = pgTable("hsa_summary_by_year", {
  hsa: text("hsa").notNull(),
  year: integer("year").notNull(),
  totalHospitals: integer("total_hospitals"),
  criticalAccess: integer("critical_access"),
  acuteLtc: integer("acute_ltc"),
  general: integer("general"),
  psychiatric: integer("psychiatric"),
  rehabilitation: integer("rehabilitation"),
  childrens: integer("childrens"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  pk: primaryKey({ columns: [t.hsa, t.year] }),
  byYear: index("hsa_sum_by_year").on(t.year),
}));

export const hpaSummaryByYear = pgTable("hpa_summary_by_year", {
  hpa: text("hpa").notNull(),
  year: integer("year").notNull(),
  totalHospitals: integer("total_hospitals"),
  criticalAccess: integer("critical_access"),
  acuteLtc: integer("acute_ltc"),
  general: integer("general"),
  psychiatric: integer("psychiatric"),
  rehabilitation: integer("rehabilitation"),
  childrens: integer("childrens"),
  msCon: integer("ms_con"),
  icuCon: integer("icu_con"),
  pedCon: integer("ped_con"),
  obgynCon: integer("obgyn_con"),
  ltcCon: integer("ltc_con"),
  msAdmissions: integer("ms_admissions"),
  msPatientDays: integer("ms_patient_days"),
  msObservationDays: integer("ms_observation_days"),
  raceWhite: numeric("race_white"),
  raceBlack: numeric("race_black"),
  raceNativeAmerican: numeric("race_native_american"),
  raceAsian: numeric("race_asian"),
  racePacificIslander: numeric("race_pacific_islander"),
  raceUnknown: numeric("race_unknown"),
  ethnicityHispanic: numeric("ethnicity_hispanic"),
  ethnicityNonHispanic: numeric("ethnicity_non_hispanic"),
  ethnicityUnknown: numeric("ethnicity_unknown"),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  pk: primaryKey({ columns: [t.hpa, t.year] }),
  byYear: index("hpa_sum_by_year").on(t.year),
}));

// Bed inventory tracker
export const bedInventory = pgTable("bed_inventory", {
  id: integer("id").generatedAlwaysAsIdentity().primaryKey(),
  facilityId: text("facility_id").references(() => facility.id, { onDelete: "cascade" }).notNull(),
  bedType: text("bed_type").notNull(), // e.g., 'MS-CON', 'ICU-CON'
  authorisedBeds: integer("authorised_beds").notNull(),
  effectiveDate: date("effective_date").notNull(),
  enteredAt: timestamp("entered_at", { withTimezone: true }).defaultNow(),
}, (t) => ({
  byFacilityTypeDate: index("bed_by_facility_type_date").on(t.facilityId, t.bedType, t.effectiveDate),
}));
